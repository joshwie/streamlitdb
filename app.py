import streamlit as st
import time
from PIL import Image
import numpy as np
import firebase_admin
from firebase_admin import credentials, db
import time

import os
st.write("Aktuelles Verzeichnis:", os.getcwd())
st.write("Dateien:", os.listdir("sensitivity_analysis"))

def toggle_lockdown():
    st.session_state["lockdown_disabled"] = lockdown_yes_no

# TODO
def check_aha_staerke():
    if abstand_checkbox or masken_checkbox:
        st.session_state["aha_staerke_disable"] = False
    else:
        st.session_state["aha_staerke_disable"] = True

def store_parameter_combination():
    param_combination = {
        "lockdown_yes_no": lockdown_yes_no,
        "lockdown_start": lockdown_start,
        "lockdown_dauer": lockdown_dauer,
        "lockdown_orte": lockdown_orte,
        "aha_staerke": aha_staerke,
        "masken": masken_checkbox,
        "abstand": abstand_checkbox,
        "ungehorsam": ungehorsam,
        #"impfstrategie": impfstrategie
    }
    st.session_state['erstellte_szenarien'].append(param_combination)


def get_dynamic_paths_to_images(param_combination):
    # Kein Lockdown ausgewaehlt
    if param_combination["lockdown_yes_no"] == False:
        # infectivity
        prefix = 'https://medien.cedis.fu-berlin.de/pandemie_dt_media/gerda_output/nolockdown/'

        if (not param_combination['masken']) and (not param_combination['abstand']):
            suffix = 'FU__infectivity_0o14'
        elif param_combination['masken'] and param_combination['abstand']:
            suffix = 'FU__infectivity_0o078'
        elif param_combination['masken'] or param_combination['abstand']:
            suffix = 'FU__infectivity_0o106'


        trajectory_image_path = prefix + suffix + "/analysis/plots/" + suffix + "_statii.png"
        sub_image_path = prefix + suffix + "/analysis/plots/" + suffix + "_sub_statii.png"
        infections_per_loc_path = prefix + suffix + "/analysis/plots/" + "infections_per_time_per_loc_type.png"
        infectionspattern_per_age_group_path = prefix + suffix + "/analysis/plots/" + suffix + "_infectionpatterns.png"
        new_diagnoses_per_100000_path = prefix + suffix + "/analysis/plots/" + suffix + "_age_specific_diagnosis_incidence.png"
        new_deaths_per_100000_path = prefix + suffix + "/analysis/plots/" + suffix + "_age_specific_death_incidence.png"

    # Mit Lockdown
    else:
        # infectivity
        prefix = 'https://medien.cedis.fu-berlin.de/pandemie_dt_media/gerda_output/infectivity_'
        if param_combination['masken'] and param_combination['abstand']:
            if param_combination['aha_staerke'] == "Empfohlen":
                prefix += '0106/'
            else:
                prefix += '0078/'
        elif param_combination['masken'] and (not param_combination['abstand']):
            if param_combination['aha_staerke'] == "Empfohlen":
                prefix += '0118/'
            else:
                prefix += '0098/'
        elif (not param_combination['masken']) and param_combination['abstand']:
            if param_combination['aha_staerke'] == "Empfohlen":
                prefix += '0126/'
            else:
                prefix += '0112/'
        else:
            prefix += '014/'

        # lockdown start
        if param_combination['lockdown_start'] == 1:
            prefix += "start_168/"
        if param_combination['lockdown_start'] == 2:
            prefix += "start_336/"
        if param_combination['lockdown_start'] == 3:
            prefix += "start_504/"
        if param_combination['lockdown_start'] == 4:
            prefix += "start_672/"

        suffix = ""
        # disobedience
        if param_combination['ungehorsam'] == '0%':
            suffix += 'FU__disobedience_0_'
        if param_combination['ungehorsam'] == '10%':
            suffix += 'FU__disobedience_0o1_'
        if param_combination['ungehorsam'] == '20%':
            suffix += 'FU__disobedience_0o2_'
        if param_combination['ungehorsam'] == '40%':
            suffix += 'FU__disobedience_0o4_'

        # lockdown end
        lockdown_start_int = int(param_combination['lockdown_start']) * 168
        lockdown_dauer_int = int(param_combination['lockdown_dauer']) * 168
        start_3 = str(lockdown_start_int + lockdown_dauer_int)
        suffix += 'start_3_' + start_3 + "_"

        # closed locs
        suffix += 'closed_locs_'
        if param_combination['lockdown_orte'] == 'Arbeit': # TODO
            suffix += "['work']"
        if param_combination['lockdown_orte'] == 'Schulen': # TODO
            suffix += "['school', 'school_0', 'school_1', 'school_2']"
        if param_combination['lockdown_orte'] == '√ñffentliche Orte':
            suffix += "['public']"
        if param_combination['lockdown_orte'] == 'Arbeit & √ñffentliche Orte':
            suffix += "['work', 'public']"
        if param_combination['lockdown_orte'] == 'Schulen & √ñffentliche Orte':
            suffix += "['public', 'school', 'school_0', 'school_1', 'school_2']"
        if param_combination['lockdown_orte'] == 'Alles':
            suffix += "['work', 'public', 'school', 'school_0', 'school_1', 'school_2']"

        trajectory_image_path = prefix + suffix + "/analysis/plots/" + suffix + "_statii.png"
        sub_image_path = prefix + suffix + "/analysis/plots/" + suffix + "_sub_statii.png"
        infections_per_loc_path = prefix + suffix + "/analysis/plots/" + "infections_per_time_per_loc_type.png"
        infectionspattern_per_age_group_path = prefix + suffix + "/analysis/plots/" + suffix + "_infectionpatterns.png"
        new_diagnoses_per_100000_path = prefix + suffix + "/analysis/plots/" + suffix + "_age_specific_diagnosis_incidence.png"
        new_deaths_per_100000_path = prefix + suffix + "/analysis/plots/" + suffix + "_age_specific_death_incidence.png"

        trajectory_image_path = trajectory_image_path.replace(' ', "%20")
        sub_image_path = sub_image_path.replace(' ', "%20")
        infections_per_loc_path = infections_per_loc_path.replace(' ', "%20")
        infectionspattern_per_age_group_path = infectionspattern_per_age_group_path.replace(' ', "%20")
        new_diagnoses_per_100000_path = new_diagnoses_per_100000_path.replace(' ', "%20")
        new_deaths_per_100000_path = new_deaths_per_100000_path.replace(' ', "%20")

    dynamic_paths_to_images = [trajectory_image_path,
                               sub_image_path,
                               infections_per_loc_path,
                               infectionspattern_per_age_group_path,
                               new_diagnoses_per_100000_path,
                               new_deaths_per_100000_path]

    return dynamic_paths_to_images


# Wide-Mode
# st.set_page_config(layout='wide')

st.title("Pandemie-Ausbr√ºche unter der Lupe")

if 'max_szenarien' not in st.session_state:
    st.session_state['max_szenarien'] = 3

if 'erstellte_szenarien' not in st.session_state:
    st.session_state['erstellte_szenarien'] = []

tab_inf, tab_sz_erstellen, tab_sz_analysieren, tab_sz_vergleichen, about = st.tabs(
    ['‚ÑπÔ∏è Informationen', 'üõ†Ô∏è Szenario erstellen', 'üîç Szenarien analysieren', 'ü§î Szenarien vergleichen', "üí°√úber's Projekt"])

with tab_inf:
    ausgangssituation, sensitivity_analysis, bedienungsanleitung = st.tabs(
        ['Ausgangssituation', 'Vorab-Analyse', 'Bedienungsanleitung'])

    with ausgangssituation:
        st.subheader('üßë‚Äçüíº Versetzt euch in die Rolle eines/r Politikers/in')
        st.info(
            'Stellt euch vor, ihr seid Mitglieder des Stadtrats und m√ºsst bereits morgen Entscheidungen √ºber Ma√ünahmen zur Vermeidung eines unkontrollierten Infektionsausbruchs treffen.\n\n'
            'Es handelt sich dabei um die kleine Gemeinde Gangelt mit einer Bev√∂lkerung von etwa 11.000 Menschen. '
            'Es ist davon auszugehen, dass es bereits erste Infizierte gibt. Wer und wie viele genau, ist allerdings nicht bekannt.')

        st.subheader('ü¶† Angaben zum Virustyp')
        st.info(
            'Noch gibt es nicht allzu viele Informationen √ºber das Virus. Es scheint jedoch deutlich ansteckender als ein Grippevirus zu sein.'
            ' Au√üerdem werden viele der Infizierten nach der Ansteckung gr√ºn.'
            ' Dar√ºber hinaus gibt es Hinweise auf einen vergleichsweise schwereren Verlauf und eine h√∂here Sterberate.'
            )

        st.subheader('üìä Euch steht GERDA als Infektions-Modell zur Verf√ºgung')
        st.info(
            'F√ºr die Entscheidungsfindung stellt euch die Wissenschaft ein Infektionsmodell namens GERDA zur Verf√ºgung.'
            ' Bei GERDA handelt es sich um ein agentenbasiertes Modell (ABM). Das bedeutet, dass die einzelnen Einwohner*innen von Gangelt im System synthetisch nachgebildet wurden,'
            ' um auf der Grundlage von echten Geodaten m√∂gliche Zukunftsszenarien des Infektionsgeschehens zu simulieren. Damit kann getestet werden, wie sich verschiedene politische Ma√ünahmen auf den Infektionsverlauf m√∂glicherweise auswirken k√∂nnten.\n\n'
            'Auch wenn bei der Entwicklung des Modells versucht wurde m√∂glichst viele reale Gegebenheiten zu ber√ºcksichtigen, kann die Realit√§t dennoch nie exakt abgebildet werden.'
            ' Das Modell soll somit lediglich als Entscheidungshilfe angesehen werden.'
            ' Denkt also auch an die verschiedenen Auswirkungen auf die Gesellschaft und andere/weitere Ma√ünahmen, die vom Modell nicht ber√ºcksichtigt werden.')

        st.subheader('‚è≥ Das Problem mit der Zeit')
        st.info(
            'Die Erstellung m√∂glicher Zukunftsszenarien mit Hilfe des Modells nimmt einige Zeit in Anspruch. '
            ' Da bereits morgen √ºber Ma√ünahmen entschieden werden muss, k√∂nnen (trotz Hochleistungsrechnern) lediglich drei Zukunftsszenarien erstellt werden. '
            ' Auf deren Grundlage k√∂nnt ihr dann eure Entscheidung f√ºr oder gegen bestimmte Ma√ünahmen st√ºtzen.')

        st.subheader('üïµÔ∏è‚Äç‚ôÄÔ∏è Informationen √ºber die Bev√∂lkerungsgruppe')
        st.info('Nicht alle Personen in der Bev√∂lkerung halten sich an die vorgegebenen Ma√ünahmen. '
                'Es ist sogar davon auszugehen, dass strengere Ma√ünahmen mit einem erh√∂hten Anteil derer, die sich nicht an die Ma√ünahmen halten, einhergeht.'
                ' Auch diesen Faktor k√∂nnt ihr (je nach eurer Erwartung) bei der Erstellung von m√∂glichen Szenarien Einstellen.')

    with sensitivity_analysis:
        st.subheader('üìà Sensitivit√§tsanalyse')
        st.info(
            'Das GERDA-Forschungsteam hat bereits etwas Vorarbeit geleistet und zwei sogenannte Sensitivit√§tsanalysen erstellt.'
            ' Bei einer Sensitivit√§tsanalyse wird geschaut, wie sich die Ver√§nderung einer bestimmten Einflussgr√∂√üe (z. B. Start oder Dauer eines Lockdowns) auf das Gesamtsystem auswirkt. Alle √ºbrigen Einflussgr√∂√üen bleiben dabei unver√§ndert.\n\n'
            ' Es steht zum einen eine Sensitivit√§tsanalye f√ºr den Start (oben) sowie eine f√ºr das Ende (unten) eines kompletten Lockdowns zur Verf√ºgung.'
            ' Vielleicht k√∂nnen euch bei der Wahl der Parameter f√ºr die Erstellung der Szenarien helfen.')

        st.write('&nbsp;')

        st.subheader("Sensitivit√§tsanalyse f√ºr den Start des Lockdowns")
        image_sens_ana_s_20 = Image.open(
            'sensitivity_analysis/suppl_s_20.png')
        st.image(image_sens_ana_s_20)

        st.markdown(
            '<div data-baseweb="tab-border" aria-hidden="true" role="presentation" class="st-cx st-bd st-cu"></div>',
            unsafe_allow_html=True)

        st.write('&nbsp;')

        st.subheader("Sensitivit√§tsanalyse f√ºr die Dauer des Lockdowns")
        image_sens_ana_s_21 = Image.open(
            'sensitivity_analysis/suppl_s_21.png')
        st.image(image_sens_ana_s_21)

    with bedienungsanleitung:
        st.subheader('ü¶† Willkommen zur Pandemie-Simulations-App! ü¶†')

        caption_black = '<p style="color:#30333f;font-size: 16px;">Hier k√∂nnt ihr verschiedene Szenarien erstellen und analysieren, um die Auswirkungen der Pandemie auf bestimmte Ma√ünahmen zu untersuchen. Zum Beispiel k√∂nnt ihr untersuchen, wie sich die Pandemie auswirkt, wenn ein Lockdown eingef√ºhrt wird oder Schulen geschlossen werden. In der oberen Leiste findet ihr 3 Reiter, zwischen denen ihr w√§hlen k√∂nnt.</p>'
        st.markdown(caption_black, unsafe_allow_html=True)

        st.caption('')

        st.subheader('üõ†Ô∏è Szenario erstellen')
        st.info(
            'Unter dem Reiter "Szenario erstellen", lassen sich durch die Auswahl verschiedener Parameter Szenarien erstellen, wobei pro Szenario 100 Simulationen durchgef√ºhrt werden. Ihr k√∂nnt jedoch insgesamt maximal 3 Szenarien erstellen.')

        st.subheader('üîç Szenarien analysieren')
        st.info(
            'Unter dem Reiter "Szenario analysieren" k√∂nnt ihr Einblicke in die visualisierten Daten eurer erstellten Szenarien gewinnen. Hier k√∂nnt ihr im Zeitverlauf die Anzahl der Infizierten, Genesenen und Verstorbenen f√ºr jedes Szenario einsehen. Klickt in der oberen Leiste auf das gew√ºnschte Szenario, um es genauer zu betrachten. Das hilft euch dabei den Pandemieverlauf zu bewerten und sinnvolle Schl√ºsse daraus zu ziehen.')

        st.subheader('ü§î Szenarien vergleichen')
        st.info(
            'Unter dem Reiter ‚ÄûSzenarien vergleichen" k√∂nnt ihr eure erstellten Szenarien im direkten Vergleich einsehen. Klickt dazu auf den Graph, der euch im Vergleich besonders interessiert, um sie direkt nebeneinander anzeigen zu lassen.')

with tab_sz_erstellen:
    st.write('&nbsp;')

    nr_sz_info_text = 'Es wurden bereits ' + str(len(st.session_state['erstellte_szenarien'])) + '/' + str(
        st.session_state['max_szenarien']) + ' Szenarien erstellt.'
    st.info(nr_sz_info_text)

    st.write('&nbsp;')

    caption_black = '<p style="color:#30333f;font-size: 14px;">Welche AHA-Regeln sollten gelten?</p>'
    st.markdown(caption_black, unsafe_allow_html=True)

    masken, abstand = st.columns(2)
    with masken:
        masken_checkbox = st.checkbox('Masken', key="masken_checkbox", value=True)
    with abstand:
        abstand_checkbox = st.checkbox('Abstand', key="abstand_checkbox", value=True)

    st.write('&nbsp;')
    st.markdown(
        '<div data-baseweb="tab-border" aria-hidden="true" role="presentation" class="st-cx st-bd st-cu"></div>',
        unsafe_allow_html=True)
    st.write('&nbsp;')

    aha_staerke = st.radio(
        'Sollen die AHA-Regeln empfohlen oder verpflichtend gelten?',
        ('Empfohlen', 'Verpflichtend'), horizontal=True, disabled=False)

    st.write('&nbsp;')
    st.markdown(
        '<div data-baseweb="tab-border" aria-hidden="true" role="presentation" class="st-cx st-bd st-cu"></div>',
        unsafe_allow_html=True)
    st.write('&nbsp;')

    lockdown_yes_no = st.checkbox("Lockdown", key="lockdown_yes_no", value=True, on_change=toggle_lockdown)

    st.write('&nbsp;')
    st.markdown(
        '<div data-baseweb="tab-border" aria-hidden="true" role="presentation" class="st-cx st-bd st-cu"></div>',
        unsafe_allow_html=True)
    st.write('&nbsp;')

    if st.session_state.get("lockdown_yes_no", True):
        st.session_state.lockdown_disabled = False
    else:
        st.session_state.lockdown_disabled = True

    lockdown_start = st.slider('Lockdown-Start (nach wie vielen Wochen?)', 1, 4, value=1, step=1,
                               disabled=st.session_state.get("lockdown_disabled", True))

    st.write('&nbsp;')
    st.markdown(
        '<div data-baseweb="tab-border" aria-hidden="true" role="presentation" class="st-cx st-bd st-cu"></div>',
        unsafe_allow_html=True)
    st.write('&nbsp;')

    lockdown_dauer_options = np.array([2,3,4,6])
    lockdown_dauer = st.select_slider('Lockdown-Dauer (in Wochen?)', options=lockdown_dauer_options, value=2,
                               disabled=st.session_state.get("lockdown_disabled", True))

    st.write('&nbsp;')
    st.markdown(
        '<div data-baseweb="tab-border" aria-hidden="true" role="presentation" class="st-cx st-bd st-cu"></div>',
        unsafe_allow_html=True)
    st.write('&nbsp;')

    lockdown_orte = st.radio(
        'Welche Orte sollen im Lockdown geschlossen werden?',
        ('Schulen', '√ñffentliche Orte', 'Arbeit & √ñffentliche Orte', 'Schulen & √ñffentliche Orte', 'Alles'), horizontal=True,
        disabled=st.session_state.get("lockdown_disabled", True))

    st.write('&nbsp;')
    st.markdown(
        '<div data-baseweb="tab-border" aria-hidden="true" role="presentation" class="st-cx st-bd st-cu"></div>',
        unsafe_allow_html=True)
    st.write('&nbsp;')

    ungehorsam = st.radio(
        'Wie hoch sch√§tzt ihr den Anteil der Bev√∂lkerung ein, der sich NICHT an die Lockdown-Verordnung h√§lt?',
        ('0%', '10%', '20%', '40%'), horizontal=True, disabled=st.session_state.get("lockdown_disabled", True))

    st.write('&nbsp;')
    st.markdown(
        '<div data-baseweb="tab-border" aria-hidden="true" role="presentation" class="st-cx st-bd st-cu"></div>',
        unsafe_allow_html=True)
    st.write('&nbsp;')

    #impfstrategie = st.radio(
    #    'Welche Impfstrategie soll verfolgt werden?',
    #    ('Zuf√§llig', 'Interaktion', 'Alter'), horizontal=True, disabled=True)

    #st.write('&nbsp;')
    #st.markdown(
    #    '<div data-baseweb="tab-border" aria-hidden="true" role="presentation" class="st-cx st-bd st-cu"></div>',
    #    unsafe_allow_html=True)
    #st.write('&nbsp;')

    is_shown = False
    if len(st.session_state['erstellte_szenarien']) >= 3:
        is_shown = True
        st.warning(
            'Ihr habt nun die maximale Anzahl an Szenarien (' + str(st.session_state['max_szenarien']) + ') erstellt.')

    dummy_1, simulieren = st.columns(2)
    if simulieren.button('Simulieren', disabled=is_shown):

        # Progress-Bar
        progress_text = "Das Szenario wird erstellt..."
        my_bar = st.progress(0, text=progress_text)

        for percent_complete in range(100):
            time.sleep(0.01)
            my_bar.progress(percent_complete + 1, text=progress_text)

        st.success('Fertig!')

        store_parameter_combination()

        time.sleep(1)
        st.rerun()

    st.markdown("[nach oben](#pandemie-ausbr-che-unter-der-lupe)")

with tab_sz_analysieren:
    if len(st.session_state['erstellte_szenarien']) == 0:
        st.info('Du musst f√ºr die Analyse mindestens ein Szenario erstellen')
    else:
        tab_names = []
        for i in range(0, len(st.session_state['erstellte_szenarien'])):
            tab_name = 'Szenario ' + str(i + 1)
            tab_names.append(tab_name)

        subtabs_analyse = st.tabs(tab_names)

        for i in range(0, len(st.session_state['erstellte_szenarien'])):
            with subtabs_analyse[i]:
                param_combination = st.session_state['erstellte_szenarien'][i]

                masken_zusammenfassung = 'Nein'
                if param_combination['masken']:
                    masken_zusammenfassung = 'Ja'

                abstand_zusammenfassung = 'Nein'
                if param_combination['abstand']:
                    abstand_zusammenfassung = 'Ja'

                st.subheader('Eure gew√§hlten Parameter f√ºr Szenario ' + str((i + 1)))

                links, rechts = st.columns(2)

                lockdown_yes_no_value = 'Nein'
                if param_combination['lockdown_yes_no']:
                    lockdown_yes_no_value = 'Ja'

                lockdown_start_param_value = ' nach ' + str(param_combination['lockdown_start']) + ' Wochen'
                if not param_combination['lockdown_yes_no']:
                    lockdown_start_param_value = ' (kein Lockdown)'

                lockdown_ablehnende = str(param_combination['ungehorsam'])
                if not param_combination['lockdown_yes_no']:
                    lockdown_ablehnende = ' (kein Lockdown)'

                make_table_smaller = '<style scoped> table {font-size: 13px;} </style>'

                st.markdown(make_table_smaller, unsafe_allow_html=True)

                with links:
                    table_links = '''
                            | Parameter | Wert |
                            |---|---|
                            | Masken | :green[''' + masken_zusammenfassung + ''']|
                            | Lockdown | :green[''' + lockdown_yes_no_value + ''']|
                            | Lockdown-Start | :green[''' + lockdown_start_param_value + ''']|
                            | Lockdown-Verweigernde | :green[''' + lockdown_ablehnende + ''']|
                        '''

                    st.markdown(table_links)

                lockdown_dauer_param_value = str(param_combination['lockdown_dauer']) + ' Woche(n)'
                if not param_combination['lockdown_yes_no']:
                    lockdown_dauer_param_value = ' (kein Lockdown)'

                aha_regeln_param_value = str(param_combination['aha_staerke'])

                lockdown_orte_param_value = str(param_combination['lockdown_orte'])
                if not param_combination['lockdown_yes_no']:
                    lockdown_orte_param_value = ' (kein Lockdown)'

                with rechts:
                    st.markdown(
                        '''
                            | Parameter | Wert |
                            |---|---|
                            | Abstand: | :green[''' + abstand_zusammenfassung + ''']|
                            | "AHA" verpflichtend/empfohlen | :green[''' + aha_regeln_param_value + ''']|
                            | Lockdown-Dauer | :green[''' + lockdown_dauer_param_value + ''']|
                            | Lockdown-Orte | :green[''' + lockdown_orte_param_value + ''']|
                        ''')

                st.write('&nbsp;')

                # get the (4?) images, based on the parameter combination
                dynamic_paths_to_images = get_dynamic_paths_to_images(param_combination)

                row1_col1, row1_col2 = st.columns(2)

                with row1_col1:
                    st.subheader("Infektionsverlauf")
                    #st.write(dynamic_paths_to_images[0])
                    st.image(dynamic_paths_to_images[0])

                with row1_col2:
                    st.subheader("Infektions-Stati im Zeitverlauf")
                    #st.write(dynamic_paths_to_images[1])
                    st.image(dynamic_paths_to_images[1])

                row2_col1, row2_col2 = st.columns(2)

                with row2_col1:
                    st.subheader("Infektionen nach Ort")
                    #st.write(dynamic_paths_to_images[2])
                    st.image(dynamic_paths_to_images[2])

                with row2_col2:
                    st.subheader("Infektionen nach Alter")
                    #st.write(dynamic_paths_to_images[3])
                    st.image(dynamic_paths_to_images[3])

                st.subheader("Neue Diagnosen nach Alter")
                #st.write(dynamic_paths_to_images[4])
                st.image(dynamic_paths_to_images[4])

                #st.subheader("Neue Todesf√§lle nach Alter")
                #st.write(dynamic_paths_to_images[5])
                #st.image(dynamic_paths_to_images[5])

with tab_sz_vergleichen:
    if len(st.session_state['erstellte_szenarien']) < 2:
        st.info('Du musst f√ºr den Vergleich mindestens zwei Szenarien erstellen')
    else:
        szenarien = st.session_state['erstellte_szenarien']
        anzahl_szenarien = len(szenarien)

        paths_to_images = get_dynamic_paths_to_images(szenarien[0])
        anzahl_images = len(paths_to_images)

        image_chunks = []
        for i in range(anzahl_images):
            image_chunks.append([])

        for param_combination in szenarien:
            paths_to_images = get_dynamic_paths_to_images(param_combination)

            for i in range(len(paths_to_images)):
                image_chunks[i].append(paths_to_images[i])

        expander_sir = st.expander("Infektionsverlauf (SIR)")
        sir = expander_sir.columns(3)

        for i in range(len(image_chunks[0])):
            with sir[i]:
                st.image(image_chunks[0][i], caption="Szenario " + str((i + 1)))

        expander_stati = st.expander("Infektions-Stati im Zeitverlauf")
        statii = expander_stati.columns(3)
        for i in range(len(image_chunks[1])):
            with statii[i]:
                st.image(image_chunks[1][i], caption="Szenario " + str((i + 1)))

        expander_loc = st.expander("Infektionen nach Ort")
        loc = expander_loc.columns(3)
        for i in range(len(image_chunks[2])):
            with loc[i]:
                st.image(image_chunks[2][i], caption="Szenario " + str((i + 1)))

        expander_inf_age_groups = st.expander("Infektionen nach Alter")
        inf_age_groups = expander_inf_age_groups.columns(3)
        for i in range(len(image_chunks[3])):
            with inf_age_groups[i]:
                st.image(image_chunks[3][i], caption="Szenario " + str((i + 1)))

        expander_new_diagn_age = st.expander("Neue Diagnosen nach Alter")
        diagnoses_age_group = expander_new_diagn_age.container()
        with diagnoses_age_group:
            for i in range(len(image_chunks[4])):
                if i > 0:
                    st.markdown(
                        '<div data-baseweb="tab-border" aria-hidden="true" role="presentation" class="st-cx st-bd st-cu"></div>',
                        unsafe_allow_html=True)
                st.image(image_chunks[4][i], caption="Szenario " + str((i + 1)))


        #expander_new_deaths_age = st.expander("Neue Todesf√§lle nach Alter")
        #deaths_age_group = expander_new_deaths_age.container()
        #with deaths_age_group:
        #    for i in range(len(image_chunks[5])):
        #        if i > 0:
        #            st.markdown(
        #                '<div data-baseweb="tab-border" aria-hidden="true" role="presentation" class="st-cx st-bd st-cu"></div>',
        #                unsafe_allow_html=True)
        #        st.image(image_chunks[5][i], caption="Szenario " + str((i + 1)))

with about:
    st.info("**√úber Uns ‚Äì Das Projekt Schule@DecisionTheatreLab**\n\nDie GERDA-WebApp wurde im Rahmen des Projekts Schule@DecisionTheatreLab entwickelt. Das Projekt bringt Sch√ºler\*innen und Wissenschaftler\*innen zusammen und zielt darauf ab, ein tieferes Verst√§ndnis f√ºr die Bedeutung von Mathematik f√ºr unsere Gesellschaft und Zukunft zu entwickeln. In sogenannten Decision Theatres erleben die Sch√ºler*innen, wie mathematische Modellierung Entscheidungsprozesse unterst√ºtzen kann. Weitere Informationen zu unserem Projekt und den Decision Theatres finden Sie auf unserer Webseite.(https://mathplus.de/schuledecisiontheatrelab/).")
    st.info("**√úber das Modell hinter der GERDA-WebApp**\n\nGERDA (GEoReferenced Demographic Agent-based model) ist ein agentenbasiertes Modell zur Simulation der Ausbreitung von COVID-19 in einem realistischen Szenario. Das Modell wurde von der Arbeitsgruppe Theoretische Biophysik an der Humboldt-Universit√§t zu Berlin entwickelt und integriert demografische Daten, Tagesabl√§ufe sowie geographische Informationen. Es ber√ºcksichtigt die klinischen Phasen von Infektion, Krankheit und Genesung und erm√∂glicht die Simulation verschiedener nicht-pharmazeutischer Ma√ünahmen an Orten wie Arbeitspl√§tzen, Schulen und √∂ffentlichen R√§umen. GERDA wurde unter der GNU General Public License v3.0 ver√∂ffentlicht und ist kostenlos im GitLab-Repository (https://tbp-klipp.science/GERDA-model/) verf√ºgbar.\n\n")
    st.info("**F√∂rderungen von MATH+ und Berlin University Alliance**\n\nDas Projekt Schule@DecisionTheatreLab wird von Oktober 2021 bis Ende 2024 sowohl vom Exzellenzcluster MATH+ als auch von der Berlin University Alliance (BUA) gef√∂rdert. Dar√ºber hinaus wird es bis Ende 2025 weiterhin durch MATH+ finanziert.\n\n")


